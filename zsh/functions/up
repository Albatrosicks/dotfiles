function update_configs() {
  local prev_dir
  local username
  print "\e[1;32m(•_•) > Updating dotfiles config...\e[0m"
  prev_dir="$(pwd)"
  username=$(whoami)
  cd "/Users/$username/dotfiles" || return
  git pull && rcup
  cd "$prev_dir" || return
}

function update_qutebrowser_codecs() {
  # Skip if qutebrowser not installed
  if [ ! -d "/Applications/qutebrowser.app" ]; then
    return
  fi

  # Get installed qutebrowser version
  QUTE_VERSION=$(/Applications/qutebrowser.app/Contents/MacOS/qutebrowser --version 2>/dev/null | grep "qutebrowser v" | cut -d " " -f 2)

  # Check for stored previous version
  VERSION_FILE="$HOME/.qutebrowser/last_patched_version"
  if [ -f "$VERSION_FILE" ]; then
    LAST_VERSION=$(cat "$VERSION_FILE")
  else
    LAST_VERSION=""
    mkdir -p "$HOME/.qutebrowser"
  fi

  # Skip if no update detected
  if [ "$QUTE_VERSION" == "$LAST_VERSION" ]; then
    return
  fi

  # Get Homebrew Qt path
  BREW_QT_PATH=$(brew --prefix qt)
  if [ ! -d "$BREW_QT_PATH" ]; then
    return
  fi

  # Get Qt versions
  QUTE_QT_VERSION=$(/Applications/qutebrowser.app/Contents/MacOS/qutebrowser --version 2>/dev/null | grep "Qt:" | cut -d " " -f 2)
  BREW_QT_VERSION=$(brew info qt --json | grep -o '"installed":.*,"linked"' | grep -o '"[0-9.]*"' | tr -d '"')

  # Check Qt major versions compatibility
  QUTE_QT_MAJOR=$(echo "$QUTE_QT_VERSION" | cut -d. -f1)
  BREW_QT_MAJOR=$(echo "$BREW_QT_VERSION" | cut -d. -f1)
  if [ "$QUTE_QT_MAJOR" != "$BREW_QT_MAJOR" ]; then
    return
  fi

  # Framework paths
  QUTE_FRAMEWORK_PATH="/Applications/qutebrowser.app/Contents/Frameworks/PyQt6/Qt6/lib/QtWebEngineCore.framework"
  BREW_FRAMEWORK_PATH="$BREW_QT_PATH/lib/QtWebEngineCore.framework"

  if [ ! -d "$BREW_FRAMEWORK_PATH" ]; then
    return
  fi

  # Update framework
  print "Updating qutebrowser codecs..."
  rm -rf "$QUTE_FRAMEWORK_PATH"
  cp -R "$BREW_FRAMEWORK_PATH" "$QUTE_FRAMEWORK_PATH"

  # Save version
  echo "$QUTE_VERSION" > "$VERSION_FILE"
}

function update_brew() {
  print "\e[1;32m(•_•) > Updating brew...\e[0m"

  # Auto-accept Xcode license if needed
  if command -v xcodebuild &>/dev/null; then
    xcodebuild -license accept &>/dev/null 2>&1 || true
  fi

  # Set environment variables to reduce interactive prompts
  export HOMEBREW_NO_ENV_HINTS=1
  export HOMEBREW_AUTO_UPDATE_SECS=86400
  export HOMEBREW_NO_INSTALL_CLEANUP=1
  export ACCEPT_EULA=Y

  # Update Homebrew
  brew update

  if brew outdated | grep -q .; then
    # Pre-fetch packages individually to handle license agreements
    for pkg in $(brew outdated | cut -d' ' -f1); do
      brew fetch "$pkg" &>/dev/null || true
    done

    # Now do parallel fetch
    brew outdated | parallel --bar --keep-order 'brew fetch --deps {} > /dev/null 2>&1'

    # Upgrade packages
    brew upgrade

    # Update qutebrowser codecs if Qt was updated
    update_qutebrowser_codecs
  else
    echo "No outdated packages found."
  fi
}

function update_appstore_apps() {
  print "\e[1;32m(•_•) > Updating AppStore applications...\e[0m"
  mas upgrade
}

function update_zsh_plugins() {
  print "\e[1;32m(•_•) > Updating plugins\e[0m"
  zinit self-update
  zinit update --parallel
}

function update_pipx() {
  print "\e[1;32m(•_•) > Updating pipx\e[0m"
  pipx upgrade-all
}

function process_duti() {
  print "\e[1;32m(•_•) > Processing duti config\e[0m"
}


up() {
    if [[ $# -eq 0 ]] ; then
        # If function is called with no parameters, run all updates
        update_configs 
        update_brew
        update_appstore_apps
        update_zsh_plugins
        update_pipx
        process_duti
    else
        # Loop through all provided arguments
        for arg in "$@"; do
            case "$arg" in
                "--dotfiles") update_configs ;;
                "--brew") update_brew ;;
                "--appstore") update_appstore_apps ;;
                "--zinit") update_zsh_plugins ;;
                "--pipx") update_pipx ;;
                "--duti") process_duti ;;
                *) echo "Invalid parameter: $arg" ;;
            esac
        done
    fi
}
