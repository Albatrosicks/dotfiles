function update_configs() {
  local prev_dir
  local username
  print "\e[1;32m(•_•) > Updating dotfiles config...\e[0m"
  prev_dir="$(pwd)"
  username=$(whoami)
  cd "/Users/$username/dotfiles" || return
  git pull && rcup
  cd "$prev_dir" || return
}

function update_brew() {
  print "\e[1;32m(•_•) > Updating brew...\e[0m"
  brew update
  if brew outdated | grep -q .; then
    brew outdated | parallel --bar --keep-order 'brew fetch --formula --deps {} > /dev/null 2>&1'
    brew upgrade
  else
    echo "No outdated packages found."
  fi
}

function update_appstore_apps() {
  print "\e[1;32m(•_•) > Updating AppStore applications...\e[0m"
  mas upgrade
}

function update_zsh_plugins() {
  print "\e[1;32m(•_•) > Updating plugins\e[0m"
  zinit self-update
  zinit update --parallel
}

function update_pipx() {
  print "\e[1;32m(•_•) > Updating pipx\e[0m"
  pipx upgrade-all
}

function process_duti() {
  print "\e[1;32m(•_•) > Processing duti config\e[0m"
}


up() {
    if [[ $# -eq 0 ]] ; then
        # If function is called with no parameters, run all updates
        update_configs 
        update_brew
        update_appstore_apps
        update_zsh_plugins
        update_pipx
        process_duti
    else
        # Loop through all provided arguments
        for arg in "$@"; do
            case "$arg" in
                "--dotfiles") update_configs ;;
                "--brew") update_brew ;;
                "--appstore") update_appstore_apps ;;
                "--zinit") update_zsh_plugins ;;
                "--pipx") update_pipx ;;
                "--duti") process_duti ;;
                *) echo "Invalid parameter: $arg" ;;
            esac
        done
    fi
}
