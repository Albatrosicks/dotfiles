function update_configs() {
  local prev_dir
  local username
  print "\e[1;32m(•_•) > Updating dotfiles config...\e[0m"
  prev_dir="$(pwd)"
  username=$(whoami)
  cd "/Users/$username/dotfiles" || return
  git pull && rcup
  cd "$prev_dir" || return
}

function update_qutebrowser_codecs() {
  # Skip if qutebrowser not installed
  if [ ! -d "/Applications/qutebrowser.app" ]; then
    return
  fi

  # Get installed qutebrowser version
  QUTE_VERSION=$(/Applications/qutebrowser.app/Contents/MacOS/qutebrowser --version 2>/dev/null | grep "qutebrowser v" | cut -d " " -f 2)

  # Check for stored previous version
  VERSION_FILE="$HOME/.qutebrowser/last_patched_version"
  if [ -f "$VERSION_FILE" ]; then
    LAST_VERSION=$(cat "$VERSION_FILE")
  else
    LAST_VERSION=""
    mkdir -p "$HOME/.qutebrowser"
  fi

  # Skip if no update detected
  if [ "$QUTE_VERSION" == "$LAST_VERSION" ]; then
    return
  fi

  # Get Homebrew Qt path
  BREW_QT_PATH=$(brew --prefix qt)
  if [ ! -d "$BREW_QT_PATH" ]; then
    return
  fi

  # Get Qt versions
  QUTE_QT_VERSION=$(/Applications/qutebrowser.app/Contents/MacOS/qutebrowser --version 2>/dev/null | grep "Qt:" | cut -d " " -f 2)
  BREW_QT_VERSION=$(brew info qt --json | grep -o '"installed":.*,"linked"' | grep -o '"[0-9.]*"' | tr -d '"')

  # Check Qt major versions compatibility
  QUTE_QT_MAJOR=$(echo "$QUTE_QT_VERSION" | cut -d. -f1)
  BREW_QT_MAJOR=$(echo "$BREW_QT_VERSION" | cut -d. -f1)
  if [ "$QUTE_QT_MAJOR" != "$BREW_QT_MAJOR" ]; then
    return
  fi

  # Framework paths
  QUTE_FRAMEWORK_PATH="/Applications/qutebrowser.app/Contents/Frameworks/PyQt6/Qt6/lib/QtWebEngineCore.framework"
  BREW_FRAMEWORK_PATH="$BREW_QT_PATH/lib/QtWebEngineCore.framework"

  if [ ! -d "$BREW_FRAMEWORK_PATH" ]; then
    return
  fi

  # Update framework
  print "Updating qutebrowser codecs..."
  rm -rf "$QUTE_FRAMEWORK_PATH"
  cp -R "$BREW_FRAMEWORK_PATH" "$QUTE_FRAMEWORK_PATH"

  # Save version
  echo "$QUTE_VERSION" > "$VERSION_FILE"
}

function update_brew() {
  print "\e[1;32m(•_•) > Updating brew...\e[0m"

  # Auto-accept Xcode license if needed
  if command -v xcodebuild &>/dev/null; then
    xcodebuild -license accept &>/dev/null 2>&1 || true
  fi

  # Set environment variables to reduce interactive prompts
  export HOMEBREW_NO_ENV_HINTS=1
  export HOMEBREW_AUTO_UPDATE_SECS=86400
  export HOMEBREW_NO_INSTALL_CLEANUP=1
  export ACCEPT_EULA=Y

  # Update Homebrew
  brew update

  if brew outdated | grep -q .; then
    # Pre-fetch packages individually to handle license agreements
    for pkg in $(brew outdated | cut -d' ' -f1); do
      brew fetch "$pkg" &>/dev/null || true
    done

    # Now do parallel fetch
    brew outdated | parallel --bar --keep-order 'brew fetch --deps {} > /dev/null 2>&1'

    # Upgrade packages
    brew upgrade

    # Update qutebrowser codecs if Qt was updated
    update_qutebrowser_codecs
  else
    echo "No outdated packages found."
  fi
}

function update_appstore_apps() {
  print "\e[1;32m(•_•) > Updating AppStore applications...\e[0m"
  mas upgrade
}

function update_zsh_plugins() {
  print "\e[1;32m(•_•) > Updating plugins\e[0m"
  zinit self-update
  # Customize Zinit message colors
  # Re-apply color overrides in the current session
  typeset -gA ZINIT
  ZINIT+=(
    col-pname   $'\e[1;4m\e[38;5;67m'               col-uname   $'\e[1;4m\e[38;5;140m' col-keyword $'\e[14m'
    col-note    $'\e[38;5;248m'                      col-error   $'\e[1m\e[38;5;174m'   col-p       $'\e[38;5;110m'
    col-info    $'\e[38;5;108m'                      col-info2   $'\e[38;5;223m'        col-profile $'\e[38;5;248m'
    col-uninst  $'\e[38;5;108m'                      col-info3   $'\e[1m\e[38;5;179m'   col-slight  $'\e[38;5;229m'
    col-failure $'\e[38;5;174m'                      col-happy   $'\e[1m\e[38;5;108m'   col-annex   $'\e[38;5;108m'
    col-id-as   $'\e[4;38;5;179m'                    col-version $'\e[3;38;5;116m'
    col-pre     $'\e[38;5;146m'                      col-msg     $'\e[0m'               col-msg2    $'\e[38;5;223m'
    col-obj     $'\e[38;5;225m'                      col-obj2    $'\e[38;5;108m'        col-file    $'\e[3;38;5;110m'
    col-dir     $'\e[3;38;5;108m'                    col-func    $'\e[38;5;182m'
    col-url     $'\e[38;5;110m'                      col-meta    $'\e[38;5;104m'        col-meta2   $'\e[38;5;146m'
    col-data    $'\e[38;5;108m'                      col-data2   $'\e[38;5;108m'        col-hi      $'\e[1m\e[38;5;108m'
    col-var     $'\e[38;5;110m'                      col-glob    $'\e[38;5;179m'        col-ehi     $'\e[1m\e[38;5;174m'
    col-cmd     $'\e[38;5;108m'                      col-ice     $'\e[38;5;74m'         col-nl      $'\n'
    col-txt     $'\e[38;5;108m'                      col-num     $'\e[3;38;5;194m'      col-term    $'\e[38;5;180m'
    col-warn    $'\e[38;5;174m'                      col-apo     $'\e[1;38;5;179m'      col-ok      $'\e[38;5;179m'
    col-faint   $'\e[38;5;246m'                      col-opt     $'\e[38;5;182m'        col-lhi     $'\e[38;5;110m'
    col-tab     $' \t '                              col-msg3    $'\e[38;5;246m'        col-b-lhi   $'\e[1m\e[38;5;110m'
    col-bar     $'\e[38;5;108m'                      col-th-bar  $'\e[38;5;108m'
    col-rst     $'\e[0m'                             col-b       $'\e[1m'               col-nb      $'\e[22m'
    col-u       $'\e[4m'                             col-it      $'\e[3m'               col-st      $'\e[9m'
    col-nu      $'\e[24m'                            col-nit     $'\e[23m'              col-nst     $'\e[29m'
    col-bspc    $'\b'                                col-b-warn  $'\e[1;38;5;174m'      col-u-warn  $'\e[4;38;5;174m'
    col-mdsh    $'\e[1;38;5;179m'"${${${(M)LANG:#*UTF-8*}:+–}:--}"$'\e[0m'
    col-mmdsh   $'\e[1;38;5;179m'"${${${(M)LANG:#*UTF-8*}:+――}:--}"$'\e[0m'
    col-↔       ${${${(M)LANG:#*UTF-8*}:+$'\e[38;5;108m↔\e[0m'}:-$'\e[38;5;108m«-»\e[0m'}
    col-…       "${${${(M)LANG:#*UTF-8*}:+…}:-...}"  col-ndsh    "${${${(M)LANG:#*UTF-8*}:+–}:-}"
    col--…      "${${${(M)LANG:#*UTF-8*}:+⋯⋯}:-···}" col-lr      "${${${(M)LANG:#*UTF-8*}:+↔}:-"«-»"}"
  )
  zinit update --parallel
}

function update_pipx() {
  print "\e[1;32m(•_•) > Updating pipx\e[0m"
  pipx upgrade-all
}

function process_duti() {
  print "\e[1;32m(•_•) > Processing duti config\e[0m"
}


up() {
    if [[ $# -eq 0 ]] ; then
        # If function is called with no parameters, run all updates
        update_configs 
        update_brew
        update_appstore_apps
        update_zsh_plugins
        update_pipx
        process_duti
    else
        # Loop through all provided arguments
        for arg in "$@"; do
            case "$arg" in
                "--dotfiles") update_configs ;;
                "--brew") update_brew ;;
                "--appstore") update_appstore_apps ;;
                "--zinit") update_zsh_plugins ;;
                "--pipx") update_pipx ;;
                "--duti") process_duti ;;
                *) echo "Invalid parameter: $arg" ;;
            esac
        done
    fi
}
