##############################
## Configuration for lsp-ai ##
##############################

[language-server.lsp-ai]
command = "lsp-ai"

[language-server.lsp-ai.config.memory]
file_store = { }

[language-server.lsp-ai.config.models.model1]
type = "open_ai"
chat_endpoint = "https://openrouter.ai/api/v1/chat/completions"
model = "mistralai/mistral-small-3.1-24b-instruct:free"
auth_token_env_var_name = "LLM_API_KEY"

[language-server.lsp-ai.config.completion]
model = "model1"

[language-server.lsp-ai.config.completion.parameters]
max_tokens = 128
max_context = 16384

## Optimized instructions for Mistral Small 3.1 24B Instruct
[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "system"
content = """
You are an AI code assistant with a 128k token context window. Your task is to replace "<CURSOR>" in code snippets with appropriate code or comments.

Instructions:
1. Analyze the surrounding code's syntax, semantics, and context
2. Identify the programming language and its conventions
3. Generate only the content that should replace "<CURSOR>"
4. Maintain stylistic consistency with the existing code

Constraints:
- Respond only with code or comments without explanations
- Never include "<CURSOR>" in your response
- Don't rewrite existing code, only insert new code at cursor position
- For ambiguous cases, choose the most contextually appropriate option
"""

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "def greet(name):\n    print(f\"Hello, {<CURSOR>}\")"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "assistant"
content = "name"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "function sum(a, b) {\n    return a + <CURSOR>;\n}"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "assistant"
content = "b"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "fn multiply(a: i32, b: i32) -> i32 {\n    a * <CURSOR>\n}"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "assistant"
content = "b"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "# <CURSOR>\ndef add(a, b):\n    return a + b"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "assistant"
content = "Adds two numbers"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "# This function checks if a number is even\n<CURSOR>"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "assistant"
content = "def is_even(n):\n    return n % 2 == 0"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "{CODE}"

#################################
## Configuration for languages ##
#################################

[[language]]
name = "go"
auto-format = true
formatter = { command = "goimports" }
language-servers = [ "gopls", "golangci-lint-langserver" ]

[[language]]
name = "python"
roots = [ "pyproject.toml" ]
auto-format = true
language-servers = [
  { name = "ruff-lsp", only-features = [ "format", "diagnostics" ] },
  { name = "pyright", except-features = [ "format", "diagnostics" ] },
]

[[language]]
name = "php"

[[language]]
name = "bash"
language-servers = [ "bash-language-server" ]

[[language]]
name = "json"
language-servers = [ "vscode-json-language-server" ]

[[language]]
name = "css"
language-servers = [ "vscode-css-language-server" ]

[[language]]
name = "dockerfile"
language-servers = [ "docker-langserver" ]

[[language]]
name = 'docker-compose'
language-servers = [ "docker-compose-langserver" ]

[[language]]
name = 'lua'
language-servers = [ "lua-language-server" ]

[[language]]
name = "sql"
language-servers = [ "sqls" ]

[[language]]
name = "yaml"
language-servers = [ "yaml-language-server" ]

########################################
## Configuration for language servers ##
########################################

[language-server.vscode-json-language-server]
config = { "provideFormatter" = true, "json" = { "keepLines" = { "enable" = true } } }

[language-server.pyright]
command = "pyright-langserver"
args = [ "--stdio" ]
config.reportMissingtypeStubs = false

[language-server.pyright.config.python.analysis]
typeCheckingMode = "basic"

[language-server.ruff-lsp]
command = "ruff-lsp"

[language-server.ruff-lsp.config]
documentFormatting = true 
settings.run = "onSave"
settings.args = [ "--ignore", "E501" ]

[language.formatter]
command = "black"
args = ["--line-length", "88", "--quiet", "-"]

[language-server.sqls]
command = "sqls"

[language-server.yaml-language-server.config.yaml]
format = { enable = true }
validation = true

[language-server.yaml-language-server.config.yaml.schemas]
"https://json.schemastore.org/github-workflow.json" = ".github/workflows/*.{yml,yaml}"
"https://raw.githubusercontent.com/ansible-community/schemas/main/f/ansible-tasks.json" = "roles/{tasks,handlers}/*.{yml,yaml}"
