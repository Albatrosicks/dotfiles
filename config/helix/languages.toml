##############################
## Configuration for lsp-ai ##
##############################

[language-server.lsp-ai]
command = "lsp-ai"

[language-server.lsp-ai.config.memory]
file_store = { }

[language-server.lsp-ai.config.models.model1]
type = "open_ai"
# chat_endpoint = "https://api.runpod.ai/v2/vllm-8b9eeigouuoh1x/openai/v1/chat/completions"
completions_endpoint = "https://api.runpod.ai/v2/vllm-8b9eeigouuoh1x/openai/v1/completions"
model = "stelterlab/Codestral-22B-v0.1-AWQ"
auth_token_env_var_name = "COPILOT_OPENAI_API_KEY"

[language-server.lsp-ai.config.completion]
model = "model1"

[language-server.lsp-ai.config.completion.parameters]
max_tokens = 64
max_context = 8064

#################################
## Configuration for languages ##
#################################

[[language]]
name = "go"
auto-format = true
formatter = { command = "goimports" }
language-servers = [ "gopls", "golangci-lint-lsp", "lsp-ai" ]

[[language]]
name = "python"
roots = [ "pyproject.toml" ]
language-servers = [ "pyright", "ruff", "lsp-ai" ]

[[language]]
name = "php"
language-servers = [ "lsp-ai" ]

[[language]]
name = "bash"
language-servers = [ "bash-language-server" , "lsp-ai" ]

[[language]]
name = "json"
language-servers = [ "vscode-json-language-server" , "lsp-ai" ]

[[language]]
name = "css"
language-servers = [ "vscode-css-language-server", "lsp-ai" ]

[[language]]
name = "dockerfile"
language-servers = [ "docker-langserver", "lsp-ai" ]

[[language]]
name = 'docker-compose'
language-servers = [ "docker-compose-langserver", "lsp-ai" ]

[[language]]
name = 'lua'
language-servers = [ "lua-language-server", "lsp-ai" ]

[[language]]
name = "sql"
language-servers = [ "sqls" ]

[language-server.yaml]
language-servers = [ "yaml-language-server" ]

########################################
## Configuration for language servers ##
########################################

[language-server.vscode-json-language-server]
config = { "provideFormatter" = true, "json" = { "keepLines" = { "enable" = true } } }

[language-server.pyright]
command = "pyright-langserver"
args = [ "--stdio" ]

[language-server.pyright.config.python.analysis]
typeCheckingMode = "basic"

[language-server.ruff]
command = "ruff-lsp"

[language-server.ruff.config.settings]
run = "onSave"
args = [ "--ignore", "E501" ]

[language.formatter]
command = "black"
args = ["--line-length", "88", "--quiet", "-"]

[language-server.sqls]
command = "sqls"

[language-server.yaml-language-server.config.yaml]
format = { enable = true }
validation = true

[language-server.yaml-language-server.config.yaml.schemas]
"https://json.schemastore.org/github-workflow.json" = ".github/workflows/*.{yml,yaml}"
"https://raw.githubusercontent.com/ansible-community/schemas/main/f/ansible-tasks.json" = "roles/{tasks,handlers}/*.{yml,yaml}"
